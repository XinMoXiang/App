{"ast":null,"code":"//对于axios进行二次封装\nimport axios from \"axios\";\n//引入进度条\nimport nprogress from \"nprogress\";\n//引入进度条样式 进度条颜色修改nprogress .bar {background}\nimport \"nprogress/nprogress.css\";\n//start()进度条开始，done（）进度条结束\n//1.利用axios对象的方法create，去创建一个axios实例\n//2.request就是axios，只不过自己配置了一小\nconst requests = axios.create({\n  //配置对象\n  //基础路径：发送请求的时候，路径当中会出现api\n  baseURL: \"/api\",\n  //代表请求超时的时间5s，5s后请求超时，即为失败\n  timeout: 5000\n});\n//请求拦截器,在发请求之前，请求拦截器可以检测到，可以再请求发送到服务端之前做一些事情\nrequests.interceptors.request.use(config => {\n  //config：配置对象，对象里面有一个配置很重要，header(请求头)\n  nprogress.start();\n  return config();\n});\n//响应拦截器\nrequests.interceptors.response.use(res => {\n  //成功的回调函数：服务器相应的数据回来以后，响应拦截器可以检测到，可以做一些事情\n  nprogress.done();\n  return res.data;\n}, err => {\n  //服务武器响应失败函数\n  return Promise.reject(new Error(\"faile\"));\n});\n\n//对外暴露二次封装后的axios\nexport default requests;","map":{"version":3,"names":["axios","nprogress","requests","create","baseURL","timeout","interceptors","request","use","config","start","response","res","done","data","err","Promise","reject","Error"],"sources":["E:/系统/项目实战/项目-SPH/app/src/api/request.js"],"sourcesContent":["//对于axios进行二次封装\r\nimport axios from \"axios\";\r\n//引入进度条\r\nimport nprogress from \"nprogress\";\r\n//引入进度条样式 进度条颜色修改nprogress .bar {background}\r\nimport \"nprogress/nprogress.css\"\r\n//start()进度条开始，done（）进度条结束\r\n//1.利用axios对象的方法create，去创建一个axios实例\r\n//2.request就是axios，只不过自己配置了一小\r\nconst requests = axios.create({\r\n  //配置对象\r\n  //基础路径：发送请求的时候，路径当中会出现api\r\n  baseURL: \"/api\",\r\n  //代表请求超时的时间5s，5s后请求超时，即为失败\r\n  timeout: 5000,\r\n});\r\n//请求拦截器,在发请求之前，请求拦截器可以检测到，可以再请求发送到服务端之前做一些事情\r\nrequests.interceptors.request.use((config) => {\r\n  //config：配置对象，对象里面有一个配置很重要，header(请求头)\r\n  nprogress.start();\r\n  return config();\r\n});\r\n//响应拦截器\r\nrequests.interceptors.response.use((res) => {\r\n    //成功的回调函数：服务器相应的数据回来以后，响应拦截器可以检测到，可以做一些事情\r\n    nprogress.done();\r\n    return res.data;\r\n  },\r\n  (err) => {\r\n    //服务武器响应失败函数\r\n    return Promise.reject(new Error(\"faile\"));\r\n  }\r\n);\r\n\r\n//对外暴露二次封装后的axios\r\nexport default requests;\r\n"],"mappings":"AAAA;AACA,OAAOA,KAAK,MAAM,OAAO;AACzB;AACA,OAAOC,SAAS,MAAM,WAAW;AACjC;AACA,OAAO,yBAAyB;AAChC;AACA;AACA;AACA,MAAMC,QAAQ,GAAGF,KAAK,CAACG,MAAM,CAAC;EAC5B;EACA;EACAC,OAAO,EAAE,MAAM;EACf;EACAC,OAAO,EAAE;AACX,CAAC,CAAC;AACF;AACAH,QAAQ,CAACI,YAAY,CAACC,OAAO,CAACC,GAAG,CAAEC,MAAM,IAAK;EAC5C;EACAR,SAAS,CAACS,KAAK,EAAE;EACjB,OAAOD,MAAM,EAAE;AACjB,CAAC,CAAC;AACF;AACAP,QAAQ,CAACI,YAAY,CAACK,QAAQ,CAACH,GAAG,CAAEI,GAAG,IAAK;EACxC;EACAX,SAAS,CAACY,IAAI,EAAE;EAChB,OAAOD,GAAG,CAACE,IAAI;AACjB,CAAC,EACAC,GAAG,IAAK;EACP;EACA,OAAOC,OAAO,CAACC,MAAM,CAAC,IAAIC,KAAK,CAAC,OAAO,CAAC,CAAC;AAC3C,CAAC,CACF;;AAED;AACA,eAAehB,QAAQ"},"metadata":{},"sourceType":"module","externalDependencies":[]}