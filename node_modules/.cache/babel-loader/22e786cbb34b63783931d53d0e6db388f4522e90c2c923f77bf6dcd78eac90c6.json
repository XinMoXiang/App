{"ast":null,"code":"// @ts-nocheck\n//配置路由\nimport Vue from \"vue\";\nimport VueRouter from \"vue-router\";\n\n//使用插件\nVue.use(VueRouter);\n\n//引入路由组件\nimport Home from \"@/pages/Home\";\nimport Login from \"@/pages/Login\";\nimport Resgister from \"@/pages/Resgister\";\nimport Search from \"@/pages/Search\";\n\n//把VueRouter原型链对象的push方法保存一份\nlet orignPush = VueRouter.prototype.push;\nlet orginReplace = VueRouter.prototype.replace;\n\n//重写push|replace\n//第一个参数：告诉原来的push方法，你应该往哪里跳转（传递哪些参数）\nVueRouter.prototype.push = function (location, resolve, reject) {\n  if (resolve && reject) {\n    //call和apply的区别\n    //相同点：都可以调用函数一次，都可以篡改函数上下文一次\n    //不同点：call和apple传递参数时：call需要用'，'隔开，apply方法执行传递数组\n    orignPush.call(this, location, resolve, reject);\n  } else {\n    orignPush.call(this, location, () => {}, () => {});\n  }\n};\nVueRouter.prototype.replace = function (location, resolve, reject) {\n  if (resolve && reject) {\n    orginReplace.call(this, location.resolve.reject);\n  } else {\n    orginReplace.call(this, location, () => {}, () => {});\n  }\n};\n\n//配置路由\nexport default new VueRouter({\n  //配置路由\n  routes: [{\n    path: \"/home\",\n    component: Home,\n    meta: {\n      show: true\n    }\n  }, {\n    path: \"/login\",\n    component: Login,\n    meta: {\n      show: false\n    }\n  }, {\n    path: \"/resgister\",\n    component: Resgister,\n    meta: {\n      show: false\n    }\n  }, {\n    path: \"/search/:keyword?\",\n    component: Search,\n    meta: {\n      show: true\n    },\n    name: \"search\"\n    //路由组件可以传递props参数(三种写法：布尔，对象，函数 函数最常用)\n    // props:($route)=>{\n    //   return{\n    //     keyword:$route.params,\n    //     k:$route.query.k\n    //   }\n    // }\n  },\n  //重定向,在项目跑起来的时候，访问/，立马定向到您所需的页面(首页)\n  {\n    path: \"*\",\n    redirect: \"/home\"\n  }]\n});","map":{"version":3,"names":["Vue","VueRouter","use","Home","Login","Resgister","Search","orignPush","prototype","push","orginReplace","replace","location","resolve","reject","call","routes","path","component","meta","show","name","redirect"],"sources":["E:/系统/项目实战/项目-SPH/app/src/router/index.js"],"sourcesContent":["// @ts-nocheck\r\n//配置路由\r\nimport Vue from \"vue\";\r\nimport VueRouter from \"vue-router\";\r\n\r\n//使用插件\r\nVue.use(VueRouter);\r\n\r\n//引入路由组件\r\nimport Home from \"@/pages/Home\";\r\nimport Login from \"@/pages/Login\";\r\nimport Resgister from \"@/pages/Resgister\";\r\nimport Search from \"@/pages/Search\";\r\n\r\n//把VueRouter原型链对象的push方法保存一份\r\nlet orignPush = VueRouter.prototype.push;\r\nlet orginReplace = VueRouter.prototype.replace;\r\n\r\n//重写push|replace\r\n//第一个参数：告诉原来的push方法，你应该往哪里跳转（传递哪些参数）\r\nVueRouter.prototype.push = function (location, resolve, reject) {\r\n  if (resolve && reject) {\r\n    //call和apply的区别\r\n    //相同点：都可以调用函数一次，都可以篡改函数上下文一次\r\n    //不同点：call和apple传递参数时：call需要用'，'隔开，apply方法执行传递数组\r\n    orignPush.call(this, location, resolve, reject);\r\n  } else {\r\n    orignPush.call(\r\n      this,\r\n      location,\r\n      () => {},\r\n      () => {}\r\n    );\r\n  }\r\n};\r\nVueRouter.prototype.replace = function (location, resolve, reject) {\r\n  if (resolve && reject) {\r\n    orginReplace.call(this, location.resolve.reject);\r\n  } else {\r\n    orginReplace.call(\r\n      this,\r\n      location,\r\n      () => {},\r\n      () => {}\r\n    );\r\n  }\r\n};\r\n\r\n//配置路由\r\nexport default new VueRouter({\r\n  //配置路由\r\n  routes: [\r\n    {\r\n      path: \"/home\",\r\n      component: Home,\r\n      meta: { show: true },\r\n    },\r\n    {\r\n      path: \"/login\",\r\n      component: Login,\r\n      meta: { show: false },\r\n    },\r\n    {\r\n      path: \"/resgister\",\r\n      component: Resgister,\r\n      meta: { show: false },\r\n    },\r\n    {\r\n      path: \"/search/:keyword?\",\r\n      component: Search,\r\n      meta: { show: true },\r\n      name: \"search\",\r\n      //路由组件可以传递props参数(三种写法：布尔，对象，函数 函数最常用)\r\n      // props:($route)=>{\r\n      //   return{\r\n      //     keyword:$route.params,\r\n      //     k:$route.query.k\r\n      //   }\r\n      // }\r\n    },\r\n    //重定向,在项目跑起来的时候，访问/，立马定向到您所需的页面(首页)\r\n    {\r\n      path: \"*\",\r\n      redirect: \"/home\",\r\n    },\r\n  ],\r\n});\r\n"],"mappings":"AAAA;AACA;AACA,OAAOA,GAAG,MAAM,KAAK;AACrB,OAAOC,SAAS,MAAM,YAAY;;AAElC;AACAD,GAAG,CAACE,GAAG,CAACD,SAAS,CAAC;;AAElB;AACA,OAAOE,IAAI,MAAM,cAAc;AAC/B,OAAOC,KAAK,MAAM,eAAe;AACjC,OAAOC,SAAS,MAAM,mBAAmB;AACzC,OAAOC,MAAM,MAAM,gBAAgB;;AAEnC;AACA,IAAIC,SAAS,GAAGN,SAAS,CAACO,SAAS,CAACC,IAAI;AACxC,IAAIC,YAAY,GAAGT,SAAS,CAACO,SAAS,CAACG,OAAO;;AAE9C;AACA;AACAV,SAAS,CAACO,SAAS,CAACC,IAAI,GAAG,UAAUG,QAAQ,EAAEC,OAAO,EAAEC,MAAM,EAAE;EAC9D,IAAID,OAAO,IAAIC,MAAM,EAAE;IACrB;IACA;IACA;IACAP,SAAS,CAACQ,IAAI,CAAC,IAAI,EAAEH,QAAQ,EAAEC,OAAO,EAAEC,MAAM,CAAC;EACjD,CAAC,MAAM;IACLP,SAAS,CAACQ,IAAI,CACZ,IAAI,EACJH,QAAQ,EACR,MAAM,CAAC,CAAC,EACR,MAAM,CAAC,CAAC,CACT;EACH;AACF,CAAC;AACDX,SAAS,CAACO,SAAS,CAACG,OAAO,GAAG,UAAUC,QAAQ,EAAEC,OAAO,EAAEC,MAAM,EAAE;EACjE,IAAID,OAAO,IAAIC,MAAM,EAAE;IACrBJ,YAAY,CAACK,IAAI,CAAC,IAAI,EAAEH,QAAQ,CAACC,OAAO,CAACC,MAAM,CAAC;EAClD,CAAC,MAAM;IACLJ,YAAY,CAACK,IAAI,CACf,IAAI,EACJH,QAAQ,EACR,MAAM,CAAC,CAAC,EACR,MAAM,CAAC,CAAC,CACT;EACH;AACF,CAAC;;AAED;AACA,eAAe,IAAIX,SAAS,CAAC;EAC3B;EACAe,MAAM,EAAE,CACN;IACEC,IAAI,EAAE,OAAO;IACbC,SAAS,EAAEf,IAAI;IACfgB,IAAI,EAAE;MAAEC,IAAI,EAAE;IAAK;EACrB,CAAC,EACD;IACEH,IAAI,EAAE,QAAQ;IACdC,SAAS,EAAEd,KAAK;IAChBe,IAAI,EAAE;MAAEC,IAAI,EAAE;IAAM;EACtB,CAAC,EACD;IACEH,IAAI,EAAE,YAAY;IAClBC,SAAS,EAAEb,SAAS;IACpBc,IAAI,EAAE;MAAEC,IAAI,EAAE;IAAM;EACtB,CAAC,EACD;IACEH,IAAI,EAAE,mBAAmB;IACzBC,SAAS,EAAEZ,MAAM;IACjBa,IAAI,EAAE;MAAEC,IAAI,EAAE;IAAK,CAAC;IACpBC,IAAI,EAAE;IACN;IACA;IACA;IACA;IACA;IACA;IACA;EACF,CAAC;EACD;EACA;IACEJ,IAAI,EAAE,GAAG;IACTK,QAAQ,EAAE;EACZ,CAAC;AAEL,CAAC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}